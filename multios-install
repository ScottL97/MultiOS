#!/bin/sh
# multios-install

echo "Welcome to the MultiOS Installer!"
echo

fdev= # 要制作系统安装磁盘的设备名
tpartnums= # 要刷写ISO的分区号
pnum= # 磁盘的分区号，用空格隔开
isopaths= # ISO文件的路径
arch=x86_64 # 要安装的系统架构
climode=1 # 1表示交互模式，0表示非交互模式
mode= # 非交互模式下的操作

# 手动选择磁盘设备
choose_dev() {
lsblk | sed -n '2,$p' | grep "^[a-z]" | grep -v sr | awk '{print NR" /dev/"$0}'
read -p "Please choose the device you need to boot multiple OS: " dev
read -p "Your choice is $dev(yes or no): " confirm

if [ -b "$dev" ] && [ "$confirm" = yes  ]
then
	fdev=$dev
fi
}

# 由磁盘设备名获取所有分区号，存进$pnum
get_pnum() {
pnum=$(fdisk -l $fdev 2>/dev/null| grep "^ " | awk '{print $1}')
}

# 显示磁盘分区信息以及U盘剩余空间
print_dev_info() {
fdisk -l $fdev 2>/dev/null | grep $fdev | awk '{print "设备总容量："$3"GB"}'
fdisk -l $fdev 2>/dev/null | grep "^ " | awk -v fdev=$fdev '{print fdev $1" "$4}'
# todo：计算磁盘剩余空间
echo --------------------------------------------
}

# 初始化磁盘设备，删除所有分区，创建boot分区
init_boot_partition() {
echo [START INIT]
get_pnum
delete_all_partitions
parted -s $fdev mklabel gpt
parted -s $fdev mkpart "EFI" 2048s 411647s 
parted -s $fdev set 1 boot
mkfs.vfat ${fdev}1
grub2_inst_and_config
}

# 安装grub2到boot分区并配置
grub2_inst_and_config() {
umount /mnt/efi 2>/dev/null
mkdir /mnt/efi 2>/dev/null
mount ${fdev}1 /mnt/efi/ 
mkdir /mnt/efi/grub2
grub2-install --efi-directory=/mnt/efi/ --boot-directory=/mnt/efi/ --directory=./${arch}-efi --removable
cp ./grub.cfg /mnt/efi/grub2
touch /mnt/efi/os.list
}

# 检查磁盘设备是否正确初始化，如果正确初始化就返回0
check_if_init() {
umount /mnt/efi 2>/dev/null
mkdir /mnt/efi 2>/dev/null
mount ${fdev}1 /mnt/efi/
if [ -d /mnt/efi/EFI ] && [ -d /mnt/efi/grub2 ] 
then
	sed -n '/multios/'p /mnt/efi/grub2/grub.cfg 2>&1 1>/dev/null
	if [ $? -eq 0 ] && [ -f /mnt/efi/os.list ]
	then
		echo [CHECK SUCCESS] OK
		return 0
	else
		echo [CHECK FAILED] files wrong
		return 2 # grub.cfg或os.list文件错误，需要重新生成
	fi
else
	echo [CHECK FAILED] grub2 needs to be reinstalled
	return 1 # 缺少文件或目录，需要重新安装grub2
fi
}

# 获取分区label，保存到boot分区的os.list文件中
make_list() {
echo $(blkid | sed -n '/iso9660/p' | awk -F = '{print $1 $2 $3}' | sed -e 's/: UUID/ /' -e 's/TYPE//' -e 's/LABEL//' -e 's/"//g') > /mnt/efi/os.list
}

# 在grub.cfg中增加menuentry
grub2_add_menuentry() {
sed -n '/multios/'p /mnt/efi/grub2/grub.cfg 2>&1 1>/dev/null
if [ $? -ne 0 ] || [ ! -e /mnt/efi/grub2/grub.cfg ]
then
	cp ./grub.cfg /mnt/efi/grub2 
fi
# 如果有参数，则添加menuentry，如果没有参数，只需要复制grub.cfg到目标路径，然后返回
if [ -z "$@" ]
then
	return 0
else
	menupart=$@
fi
# 创建/mnt/multiostmp目录来挂载系统分区
umount /mnt/multiostmp 2>/dev/null
mkdir /mnt/multiostmp 2>/dev/null

for part in $menupart
do
	# 获取ISO分区的uuid和label，用于menuentry中设置root变量
	uuid=$(blkid | grep ${fdev}${part} | awk -F = '{print $2}' | sed -e 's/"//g' -e 's/ LABEL//') 
	label=$(blkid | grep ${fdev}${part} | awk -F = '{print $3}' | sed -e 's/"//g' -e 's/ TYPE//')
	# 获取ISO分区中的grub.cfg
	mount ${fdev}${part} /mnt/multiostmp
	oricfg=$(find /mnt/multiostmp -name grub*.cfg)
	# 考虑到可能有多个grub.cfg的情况
	for cfg in $oricfg
	do
		# 获取menuentry的开始行号，多个menuentry的开始行号用空格隔开
		startnum=$(grep -n "^menuentry" ${cfg} | awk -F : '{print $1}')
		# 获取menuentry匹配的}
		endnum=$(grep -n "^}" ${cfg} | awk -F : '{print $1}')
		# 如果获取的}在第一个menuentry之前，则不是与menuentry匹配的}
		typeset -i firstart=$(echo $startnum | sed 's/ .*//')
		for num in $endnum
		do
			if [ $num -lt $firstart ]
			then
				endnum=$(echo $endnum | sed 's/'$num' //')
			else
				break
			fi
		done
		# 将字符串转换为数组
		startnums=($startnum)
		endnums=($endnum)
		entrynums=${#startnums[@]}
		num=0
		# 添加menuentry到临时文件，增加设置root变量的命令后将menuentry添加到/mnt/efi/grub2/grub.cfg
		while [ $num -lt $entrynums ]
		do	
			sed -n ${startnums[$num]}','${endnums[$num]}p $cfg > menuentry.tmp
			sed -i "1a search --no-floppy --fs-uuid --set=root ${uuid}" menuentry.tmp
			sed -i "1a search --no-floppy --set=root -l '${label}'" menuentry.tmp
			cat menuentry.tmp >> /mnt/efi/grub2/grub.cfg
			num=$(expr $num + 1)
		done
	done
	umount /mnt/multiostmp
done
rm -rf menuentry.tmp
rm -rf /mnt/multiostmp
}

# 删除所有U盘分区
delete_all_partitions() {
for num in $pnum
do
	umount ${fdev}${num} 2>/dev/null
	parted -s ${fdev} rm ${num}
	[ $? -eq 1 ] && echo [DELETE SUCCESS]${fdev}${num}
done
}

# 创建新系统分区，返回创建的分区号
create_sys_partition() {
isopath=$1
# 获取ISO映像文件大小
if [ -f "$isopath" ]
then
	isobytes=$(ls -l $isopath | awk '{print $5}')
fi
# 获取U盘新的分区的开始字节数
# 这里是简单判断fdisk -l命令最后一行的分区号，如果之前分区号不连续，仍然会在最后的分区后面新建分区，这样会
# 造成空间浪费
# todo：使用算法防止空间浪费
nextbyte=$(expr $(parted -s $fdev u B print | grep "^ " | sed -n "$"p | awk '{print $3}' | sed 's/B//') + 1)
echo "Start byte: "$nextbyte
echo "bytes: "$isobytes
endbyte=$(expr $nextbyte + $isobytes + 1)
echo "End byte: "$endbyte
get_pnum # 先获取未创建新分区前的分区号，以确定新创建的分区号
parted -s $fdev mkpart primary ${nextbyte}B ${endbyte}B
[ $? = 0 ] && echo [MKPART SUCCESS]
print_dev_info $fdev
# 返回新创建的分区号，通过fdisk -l和$pnum进行比较来判断
curpnum=$(fdisk -l $fdev 2>/dev/null | grep "^ " | awk '{print $1}')
for num in $curpnum
do
	echo $pnum | grep $num 1>/dev/null
	[ $? -eq 1 ] && return $num
done
}

# 删除系统分区
delete_one_partition() {
delpart=$1
if [ -n "$delpart" ]
then
	if [ "$delpart" = "1" ]
	then
		echo Do not delete the boot partition!
	else
		# todo：在grub.cfg中删除相应的menuentry
		umount ${fdev}${delpart} 2>/dev/null
		parted -s $fdev rm $delpart
		[ $? = 0 ] && echo [DELETE SUCCESS]${fdev}${delpart}
		print_dev_info $fdev
		make_list
	fi
fi
}

# 烧写ISO到目标分区
# todo: 支持多个参数并发执行
do_dd() {
isopaths=($1)
partnums=($2)
# 要刷的系统个数
sum=${#isopaths[@]}
i=0
while [ $i -lt $sum ]
do
	if [ ${partnums[$i]} -ne 1 ]
	then
		# todo: 判断最佳bs大小，使刷写速度最快
		bsize=1000000
		bcount=$(expr $(ls -l ${isopaths[$i]} | awk '{print $5}') / 1000000 + 1)
		echo [START WRITING ISO] ${isopaths[$i]}
		dd if=${isopaths[$i]} of=${fdev}${partnums[$i]} bs=$bsize count=$bcount &
	else
		echo [DO_DD FAILED] Do not write ISO to partition 1\(EFI boot\)
	fi
	i=$(expr $i + 1)
done
# 每隔5秒显示dd命令进度
# watch -n 5 killall -USR1 dd
while :
do
	ps -ef | grep "[0-9] dd"
	if [ $? -eq 0 ]
	then
		killall -USR1 dd			
		sleep 5
	else
		break			
	fi
done
echo [WRITE ISO SUCCESS]
}

INT_handler() {
kill -9 $(ps -ef | grep "[0-9] dd" | awk '{print $2}')
echo [USER INT]
exit 1
}

# 用户中断时终止dd命令
trap 'INT_handler' SIGINT
# 非交互模式，解析参数
# d: target Device; s: System image path; m: Mode; p: target Partition number
while getopts d:m:p: OPTION
do
	case $OPTION in
	d)fdev=$OPTARG; climode=0;; # 只要含有-d参数，就认为是非交互模式
	m)mode=$OPTARG;;
	p)tpartnums=$OPTARG;;
	esac
done

# 如果没有输入-d参数，就进入交互模式
if [ $climode -eq 1 ]
then
	choose_dev
	if [ -b "$fdev" ]
	then
		print_dev_info
		read -p "Please input the ISO path: " isopaths
		if [ -n "$isopaths" ]
		then
			# todo：检查参数正确后显示菜单
			create_sys_partition "$isopaths"
			tpartnums=$?
			do_dd "$isopaths" "$tpartnums"
			delete_one_partition "$tpartnums"
		fi
	fi
	exit 0
fi

# 如果输入了-d参数，则会从这里开始执行，为非交互模式
# 如果是a或r模式，则需要ISO路径参数
if [ $mode = 'a' ] || [ $mode = 'r' ]
then
	shift $((OPTIND-1))
	if [ -z "$1" ]
	then
		echo "Please input the ISO path you want to write"
		exit 1
	else
		# 如果是a模式，可以有多个ISO路径参数
		if [ $mode = 'a' ]
		then	
			isopaths=$@
		else # 如果是r模式，默认使用第一个ISO路径参数
			isopaths=$1
		fi
	fi
fi


# 如果不是重置模式（-m i），先检查磁盘是否初始化（包含正确的boot分区）
# 如果grub2缺少目录，重新安装grub2
# 如果缺少正确的grub.cfg或os.list，更新这两个文件
if [ $mode != 'i' ]
then
	check_if_init
	rc=$?
	if [ $rc -eq 1 ]
	then
		init_boot_partition
	elif [ $rc -eq 2 ]
	then
		make_list
		grub2_add_menuentry	
	fi
fi
if [ -n "$fdev" ] && [ -n "$mode" ]
then
	if [ -n "$isopaths" ]
	then # 制作模式
		echo $isopaths
		case $mode in
		# 新创建分区刷ISO
		a)for iso in $isopaths
		  do
  	  		  create_sys_partition $iso
  	  		  tpartnums="$tpartnums $?" # create_sys_partition返回新创建的分区号
		  done
  	  	  do_dd "$isopaths" "$tpartnums"
	  	;;
		# 在某已存在分区刷ISO
		r)do_dd "$isopaths" "$tpartnums"
	  	  ;;
		esac
		# 刷写结束后更新grub.cfg和os.list
		make_list
		grub2_add_menuentry "$tpartnums"
	else # 维护模式
		case $mode in
		# 删除所有分区，初始化磁盘（创建EFI boot分区）
		i)get_pnum
	  	  delete_all_partitions
	  	  init_boot_partition
		  check_if_init
	  	  ;;
		# 删除某系统分区
		d)delete_one_partition "$tpartnums";;
		esac
	fi
fi
